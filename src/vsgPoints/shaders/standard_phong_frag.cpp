#include <vsg/io/VSG.h>
#include <vsg/io/mem_stream.h>
static auto standard_phong_frag = []() {
static const char str[] = 
R"(#vsga 1.0.6
Root id=1 vsg::ShaderStage
{
  userObjects 0
  stage 16
  entryPointName "main"
  module id=2 vsg::ShaderModule
  {
    userObjects 0
    hints id=0
    source "#version 450
#extension GL_ARB_separate_shader_objects : enable
#pragma import_defines (VSG_POINT_SPRITE, VSG_DIFFUSE_MAP, VSG_GREYSCALE_DIFFUSE_MAP, VSG_EMISSIVE_MAP, VSG_LIGHTMAP_MAP, VSG_NORMAL_MAP, VSG_SPECULAR_MAP, VSG_TWO_SIDED_LIGHTING)

#ifdef VSG_DIFFUSE_MAP
layout(set = 0, binding = 0) uniform sampler2D diffuseMap;
#endif

#ifdef VSG_NORMAL_MAP
layout(set = 0, binding = 2) uniform sampler2D normalMap;
#endif

#ifdef VSG_LIGHTMAP_MAP
layout(set = 0, binding = 3) uniform sampler2D aoMap;
#endif

#ifdef VSG_EMISSIVE_MAP
layout(set = 0, binding = 4) uniform sampler2D emissiveMap;
#endif

#ifdef VSG_SPECULAR_MAP
layout(set = 0, binding = 5) uniform sampler2D specularMap;
#endif

layout(set = 0, binding = 10) uniform MaterialData
{
    vec4 ambientColor;
    vec4 diffuseColor;
    vec4 specularColor;
    vec4 emissiveColor;
    float shininess;
    float alphaMask;
    float alphaMaskCutoff;
} material;

layout(set = 1, binding = 0) uniform LightData
{
    vec4 values[64];
} lightData;

layout(location = 0) in vec3 eyePos;
layout(location = 1) in vec3 normalDir;
layout(location = 2) in vec4 vertexColor;
#ifndef VSG_POINT_SPRITE
layout(location = 3) in vec2 texCoord0;
#endif
layout(location = 5) in vec3 viewDir;

layout(location = 0) out vec4 outColor;

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
#ifdef VSG_NORMAL_MAP
    // Perturb normal, see http://www.thetenthplanet.de/archives/1180
    vec3 tangentNormal = texture(normalMap, texCoord0).xyz * 2.0 - 1.0;

    //tangentNormal *= vec3(2,2,1);

    vec3 q1 = dFdx(eyePos);
    vec3 q2 = dFdy(eyePos);
    vec2 st1 = dFdx(texCoord0);
    vec2 st2 = dFdy(texCoord0);

    vec3 N = normalize(normalDir);
    vec3 T = normalize(q1 * st2.t - q2 * st1.t);
    vec3 B = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
#else
    return normalize(normalDir);
#endif
}

vec3 computeLighting(vec3 ambientColor, vec3 diffuseColor, vec3 specularColor, vec3 emissiveColor, float shininess, float ambientOcclusion, vec3 ld, vec3 nd, vec3 vd)
{
    vec3 color = vec3(0.0);
    color.rgb += ambientColor;

    float diff = max(dot(ld, nd), 0.0);
    color.rgb += diffuseColor * diff;

    if (diff > 0.0)
    {
        vec3 halfDir = normalize(ld + vd);
        color.rgb += specularColor * pow(max(dot(halfDir, nd), 0.0), shininess);
    }

    vec3 result = color + emissiveColor;
    result *= ambientOcclusion;

    return result;
}

void main()
{
#ifdef VSG_POINT_SPRITE
    vec2 texCoord0 = gl_PointCoord.xy;
#endif

    vec4 diffuseColor = vertexColor * material.diffuseColor;
#ifdef VSG_DIFFUSE_MAP
    #ifdef VSG_GREYSCALE_DIFFUSE_MAP
        float v = texture(diffuseMap, texCoord0.st).s;
        diffuseColor *= vec4(v, v, v, 1.0);
    #else
        diffuseColor *= texture(diffuseMap, texCoord0.st);
    #endif
#endif

    vec4 ambientColor = diffuseColor * material.ambientColor * material.ambientColor.a;
    vec4 specularColor = material.specularColor;
    vec4 emissiveColor = material.emissiveColor;
    float shininess = material.shininess;
    float ambientOcclusion = 1.0;

    if (material.alphaMask == 1.0f)
    {
        if (diffuseColor.a < material.alphaMaskCutoff)
            discard;
    }

#ifdef VSG_EMISSIVE_MAP
    emissiveColor *= texture(emissiveMap, texCoord0.st);
#endif

#ifdef VSG_LIGHTMAP_MAP
    ambientOcclusion *= texture(aoMap, texCoord0.st).r;
#endif

#ifdef VSG_SPECULAR_MAP
    specularColor *= texture(specularMap, texCoord0.st);
#endif

    vec3 nd = getNormal();
    vec3 vd = normalize(viewDir);

    vec3 color = vec3(0.0, 0.0, 0.0);

    vec4 lightNums = lightData.values[0];
    int numAmbientLights = int(lightNums[0]);
    int numDirectionalLights = int(lightNums[1]);
    int numPointLights = int(lightNums[2]);
    int numSpotLights = int(lightNums[3]);
    int index = 1;

    if (numAmbientLights>0)
    {
        // ambient lights
        for(int i = 0; i<numAmbientLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            color += (ambientColor.rgb * lightColor.rgb) * (lightColor.a);
        }
    }

    if (numDirectionalLights>0)
    {
        // directional lights
        for(int i = 0; i<numDirectionalLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            vec3 direction = -lightData.values[index++].xyz;

            float unclamped_LdotN = dot(direction, nd);
            #ifdef VSG_TWO_SIDED_LIGHTING
            if (unclamped_LdotN < 0.0)
            {
                nd = -nd;
                unclamped_LdotN = -unclamped_LdotN;
            }
            #endif

            float diff = max(unclamped_LdotN, 0.0);
            color.rgb += (diffuseColor.rgb * lightColor.rgb) * (diff * lightColor.a);

            if (shininess > 0.0 && diff > 0.0)
            {
                vec3 halfDir = normalize(direction + vd);
                color.rgb += specularColor.rgb * (pow(max(dot(halfDir, nd), 0.0), shininess) * lightColor.a);
            }
        }
    }

    if (numPointLights>0)
    {
        // point light
        for(int i = 0; i<numPointLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            vec3 position = lightData.values[index++].xyz;
            vec3 delta = position - eyePos;
            float distance2 = delta.x * delta.x + delta.y * delta.y + delta.z * delta.z;
            vec3 direction = delta / sqrt(distance2);
            float scale = lightColor.a / distance2;

            float unclamped_LdotN = dot(direction, nd);
            #ifdef VSG_TWO_SIDED_LIGHTING
            if (unclamped_LdotN < 0.0)
            {
                nd = -nd;
                unclamped_LdotN = -unclamped_LdotN;
            }
            #endif

            float diff = scale * max(unclamped_LdotN, 0.0);

            color.rgb += (diffuseColor.rgb * lightColor.rgb) * diff;
            if (shininess > 0.0 && diff > 0.0)
            {
                vec3 halfDir = normalize(direction + vd);
                color.rgb += specularColor.rgb * (pow(max(dot(halfDir, nd), 0.0), shininess) * scale);
            }
        }
    }

    if (numSpotLights>0)
    {
        // spot light
        for(int i = 0; i<numSpotLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            vec4 position_cosInnerAngle = lightData.values[index++];
            vec4 lightDirection_cosOuterAngle = lightData.values[index++];

            vec3 delta = position_cosInnerAngle.xyz - eyePos;
            float distance2 = delta.x * delta.x + delta.y * delta.y + delta.z * delta.z;
            vec3 direction = delta / sqrt(distance2);

            float dot_lightdirection = dot(lightDirection_cosOuterAngle.xyz, -direction);
            float scale = (lightColor.a  * smoothstep(lightDirection_cosOuterAngle.w, position_cosInnerAngle.w, dot_lightdirection)) / distance2;

            float unclamped_LdotN = dot(direction, nd);
            #ifdef VSG_TWO_SIDED_LIGHTING
            if (unclamped_LdotN < 0.0)
            {
                nd = -nd;
                unclamped_LdotN = -unclamped_LdotN;
            }
            #endif

            float diff = scale * max(unclamped_LdotN, 0.0);
            color.rgb += (diffuseColor.rgb * lightColor.rgb) * diff;
            if (shininess > 0.0 && diff > 0.0)
            {
                vec3 halfDir = normalize(direction + vd);
                color.rgb += specularColor.rgb * (pow(max(dot(halfDir, nd), 0.0), shininess) * scale);
            }
        }
    }

    outColor.rgb = (color * ambientOcclusion) + emissiveColor.rgb;
    outColor.a = diffuseColor.a;
}
"
    code 2822
     119734787 65536 524299 460 0 131089 1 393227 1 1280527431 1685353262 808793134
     0 196622 0 1 720911 4 4 1852399981 0 12 21 79
     242 440 459 196624 4 7 196611 2 450 589828 1096764487 1935622738
     1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0 327685 9
     1316250983 1634562671 10348 327685 12 1836216174 1766091873 114 393221 19 1717987684 1130722165
     1919904879 0 327685 21 1953654134 1866692709 7499628 393221 23 1702125901 1818323314 1635017028
     0 458758 23 0 1768058209 1131703909 1919904879 0 458758 23 1 1717987684
     1130722165 1919904879 0 458758 23 2 1667592307 1918987381 1869377347 114 458758 23
     3 1936289125 1702259059 1869377347 114 393222 23 4 1852401779 1936027241 115 393222
     23 5 1752198241 1935756641 107 458758 23 6 1752198241 1935756641 1953842027 6710895
     327685 25 1702125933 1818323314 0 393221 32 1768058209 1131703909 1919904879 0 393221
     44 1667592307 1918987381 1869377347 114 393221 48 1936289125 1702259059 1869377347 114 327685
     53 1852401779 1936027241 115 458757 57 1768058209 1333030501 1970037603 1852795251 0 196613
     76 25710 196613 78 25718 262149 79 2003134838 7498052 262149 82 1869377379
     114 327685 85 1751607660 1836404340 115 327685 88 1751607628 1952531572 97 327686
     88 0 1970037110 29541 327685 90 1751607660 1952531572 97 458757 94 1097692526
     1701405293 1766618222 1937008743 0 524293 99 1148024174 1667592809 1852795252 1766616161 1937008743 0
     393221 104 1349350766 1953393007 1751607628 29556 393221 109 1399682414 1282699120 1952999273 115
     262149 113 1701080681 120 196613 118 105 327685 127 1751607660 1819231092 29295
     196613 148 105 327685 157 1751607660 1819231092 29295 327685 162 1701996900 1869182051
     110 393221 169 1818455669 1701866849 1682726756 5141615 262149 173 1717987684 0 262149
     195 1718378856 7498052 196613 220 105 327685 229 1751607660 1819231092 29295 327685
     234 1769172848 1852795252 0 262149 240 1953260900 97 262149 242 1348827493 29551
     327685 245 1953720676 1701015137 50 327685 263 1701996900 1869182051 110 262149 269
     1818321779 101 393221 274 1818455669 1701866849 1682726756 5141615 262149 278 1717987684 0
     262149 299 1718378856 7498052 196613 323 105 327685 332 1751607660 1819231092 29295
     524293 337 1769172848 1852795252 1936679775 1701736009 1735278962 25964 655365 342 1751607660 1919501428
     1769235301 1667198575 1968141167 1098016116 1701603182 0 262149 347 1953260900 97 327685 352
     1953720676 1701015137 50 327685 370 1701996900 1869182051 110 458757 376 1601466212 1751607660
     1919509620 1769235301 28271 262149 382 1818321779 101 393221 394 1818455669 1701866849 1682726756
     5141615 262149 398 1717987684 0 262149 419 1718378856 7498052 327685 440 1131705711
     1919904879 0 327685 459 1131963764 1685221231 48 262215 12 30 1 262215
     21 30 2 327752 23 0 35 0 327752 23 1 35
     16 327752 23 2 35 32 327752 23 3 35 48 327752
     23 4 35 64 327752 23 5 35 68 327752 23 6
     35 72 196679 23 2 262215 25 34 0 262215 25 33
     10 262215 79 30 5 262215 87 6 16 327752 88 0
     35 0 196679 88 2 262215 90 34 1 262215 90 33
     0 262215 242 30 0 262215 440 30 0 262215 459 30
     3 131091 2 196641 3 2 196630 6 32 262167 7 6
     3 196641 8 7 262176 11 1 7 262203 11 12 1
     262167 17 6 4 262176 18 7 17 262176 20 1 17
     262203 20 21 1 589854 23 17 17 17 17 6 6
     6 262176 24 2 23 262203 24 25 2 262165 26 32
     1 262187 26 27 1 262176 28 2 17 262187 26 34
     0 262165 38 32 0 262187 38 39 3 262176 40 2
     6 262187 26 45 2 262187 26 49 3 262176 52 7
     6 262187 26 54 4 262187 6 58 1065353216 262187 26 59
     5 131092 62 262187 26 68 6 262176 75 7 7 262203
     11 79 1 262187 6 83 0 393260 7 84 83 83
     83 262187 38 86 64 262172 87 17 86 196638 88 87
     262176 89 2 88 262203 89 90 2 262176 93 7 26
     262187 38 95 0 262187 38 100 1 262187 38 105 2
     262203 11 242 1 262176 439 3 17 262203 439 440 3
     262176 447 3 6 262167 457 6 2 262176 458 1 457
     262203 458 459 1 327734 2 4 0 3 131320 5 262203
     18 19 7 262203 18 32 7 262203 18 44 7 262203
     18 48 7 262203 52 53 7 262203 52 57 7 262203
     75 76 7 262203 75 78 7 262203 75 82 7 262203
     18 85 7 262203 93 94 7 262203 93 99 7 262203
     93 104 7 262203 93 109 7 262203 93 113 7 262203
     93 118 7 262203 18 127 7 262203 93 148 7 262203
     18 157 7 262203 75 162 7 262203 52 169 7 262203
     52 173 7 262203 75 195 7 262203 93 220 7 262203
     18 229 7 262203 75 234 7 262203 75 240 7 262203
     52 245 7 262203 75 263 7 262203 52 269 7 262203
     52 274 7 262203 52 278 7 262203 75 299 7 262203
     93 323 7 262203 18 332 7 262203 18 337 7 262203
     18 342 7 262203 75 347 7 262203 52 352 7 262203
     75 370 7 262203 52 376 7 262203 52 382 7 262203
     52 394 7 262203 52 398 7 262203 75 419 7 262205
     17 22 21 327745 28 29 25 27 262205 17 30 29
     327813 17 31 22 30 196670 19 31 262205 17 33 19
     327745 28 35 25 34 262205 17 36 35 327813 17 37
     33 36 393281 40 41 25 34 39 262205 6 42 41
     327822 17 43 37 42 196670 32 43 327745 28 46 25
     45 262205 17 47 46 196670 44 47 327745 28 50 25
     49 262205 17 51 50 196670 48 51 327745 40 55 25
     54 262205 6 56 55 196670 53 56 196670 57 58 327745
     40 60 25 59 262205 6 61 60 327860 62 63 61
     58 196855 65 0 262394 63 64 65 131320 64 327745 52
     66 19 39 262205 6 67 66 327745 40 69 25 68
     262205 6 70 69 327864 62 71 67 70 196855 73 0
     262394 71 72 73 131320 72 65788 131320 73 131321 65 131320
     65 262201 7 77 9 196670 76 77 262205 7 80 79
     393228 7 81 1 69 80 196670 78 81 196670 82 84
     393281 28 91 90 34 34 262205 17 92 91 196670 85
     92 327745 52 96 85 95 262205 6 97 96 262254 26
     98 97 196670 94 98 327745 52 101 85 100 262205 6
     102 101 262254 26 103 102 196670 99 103 327745 52 106
     85 105 262205 6 107 106 262254 26 108 107 196670 104
     108 327745 52 110 85 39 262205 6 111 110 262254 26
     112 111 196670 109 112 196670 113 27 262205 26 114 94
     327853 62 115 114 34 196855 117 0 262394 115 116 117
     131320 116 196670 118 34 131321 119 131320 119 262390 121 122
     0 131321 123 131320 123 262205 26 124 118 262205 26 125
     94 327857 62 126 124 125 262394 126 120 121 131320 120
     262205 26 128 113 327808 26 129 128 27 196670 113 129
     393281 28 130 90 34 128 262205 17 131 130 196670 127
     131 262205 17 132 32 524367 7 133 132 132 0 1
     2 262205 17 134 127 524367 7 135 134 134 0 1
     2 327813 7 136 133 135 327745 52 137 127 39 262205
     6 138 137 327822 7 139 136 138 262205 7 140 82
     327809 7 141 140 139 196670 82 141 131321 122 131320 122
     262205 26 142 118 327808 26 143 142 27 196670 118 143
     131321 119 131320 121 131321 117 131320 117 262205 26 144 99
     327853 62 145 144 34 196855 147 0 262394 145 146 147
     131320 146 196670 148 34 131321 149 131320 149 262390 151 152
     0 131321 153 131320 153 262205 26 154 148 262205 26 155
     99 327857 62 156 154 155 262394 156 150 151 131320 150
     262205 26 158 113 327808 26 159 158 27 196670 113 159
     393281 28 160 90 34 158 262205 17 161 160 196670 157
     161 262205 26 163 113 327808 26 164 163 27 196670 113
     164 393281 28 165 90 34 163 262205 17 166 165 524367
     7 167 166 166 0 1 2 262271 7 168 167 196670
     162 168 262205 7 170 162 262205 7 171 76 327828 6
     172 170 171 196670 169 172 262205 6 174 169 458764 6
     175 1 40 174 83 196670 173 175 262205 17 176 19
     524367 7 177 176 176 0 1 2 262205 17 178 157
     524367 7 179 178 178 0 1 2 327813 7 180 177
     179 262205 6 181 173 327745 52 182 157 39 262205 6
     183 182 327813 6 184 181 183 327822 7 185 180 184
     262205 7 186 82 327809 7 187 186 185 196670 82 187
     262205 6 188 53 327866 62 189 188 83 262205 6 190
     173 327866 62 191 190 83 327847 62 192 189 191 196855
     194 0 262394 192 193 194 131320 193 262205 7 196 162
     262205 7 197 78 327809 7 198 196 197 393228 7 199
     1 69 198 196670 195 199 262205 17 200 44 524367 7
     201 200 200 0 1 2 262205 7 202 195 262205 7
     203 76 327828 6 204 202 203 458764 6 205 1 40
     204 83 262205 6 206 53 458764 6 207 1 26 205
     206 327745 52 208 157 39 262205 6 209 208 327813 6
     210 207 209 327822 7 211 201 210 262205 7 212 82
     327809 7 213 212 211 196670 82 213 131321 194 131320 194
)"
R"(     131321 152 131320 152 262205 26 214 148 327808 26 215 214
     27 196670 148 215 131321 149 131320 151 131321 147 131320 147
     262205 26 216 104 327853 62 217 216 34 196855 219 0
     262394 217 218 219 131320 218 196670 220 34 131321 221 131320
     221 262390 223 224 0 131321 225 131320 225 262205 26 226
     220 262205 26 227 104 327857 62 228 226 227 262394 228
     222 223 131320 222 262205 26 230 113 327808 26 231 230
     27 196670 113 231 393281 28 232 90 34 230 262205 17
     233 232 196670 229 233 262205 26 235 113 327808 26 236
     235 27 196670 113 236 393281 28 237 90 34 235 262205
     17 238 237 524367 7 239 238 238 0 1 2 196670
     234 239 262205 7 241 234 262205 7 243 242 327811 7
     244 241 243 196670 240 244 327745 52 246 240 95 262205
     6 247 246 327745 52 248 240 95 262205 6 249 248
     327813 6 250 247 249 327745 52 251 240 100 262205 6
     252 251 327745 52 253 240 100 262205 6 254 253 327813
     6 255 252 254 327809 6 256 250 255 327745 52 257
     240 105 262205 6 258 257 327745 52 259 240 105 262205
     6 260 259 327813 6 261 258 260 327809 6 262 256
     261 196670 245 262 262205 7 264 240 262205 6 265 245
     393228 6 266 1 31 265 393296 7 267 266 266 266
     327816 7 268 264 267 196670 263 268 327745 52 270 229
     39 262205 6 271 270 262205 6 272 245 327816 6 273
     271 272 196670 269 273 262205 7 275 263 262205 7 276
     76 327828 6 277 275 276 196670 274 277 262205 6 279
     269 262205 6 280 274 458764 6 281 1 40 280 83
     327813 6 282 279 281 196670 278 282 262205 17 283 19
     524367 7 284 283 283 0 1 2 262205 17 285 229
     524367 7 286 285 285 0 1 2 327813 7 287 284
     286 262205 6 288 278 327822 7 289 287 288 262205 7
     290 82 327809 7 291 290 289 196670 82 291 262205 6
     292 53 327866 62 293 292 83 262205 6 294 278 327866
     62 295 294 83 327847 62 296 293 295 196855 298 0
     262394 296 297 298 131320 297 262205 7 300 263 262205 7
     301 78 327809 7 302 300 301 393228 7 303 1 69
     302 196670 299 303 262205 17 304 44 524367 7 305 304
     304 0 1 2 262205 7 306 299 262205 7 307 76
     327828 6 308 306 307 458764 6 309 1 40 308 83
     262205 6 310 53 458764 6 311 1 26 309 310 262205
     6 312 269 327813 6 313 311 312 327822 7 314 305
     313 262205 7 315 82 327809 7 316 315 314 196670 82
     316 131321 298 131320 298 131321 224 131320 224 262205 26 317
     220 327808 26 318 317 27 196670 220 318 131321 221 131320
     223 131321 219 131320 219 262205 26 319 109 327853 62 320
     319 34 196855 322 0 262394 320 321 322 131320 321 196670
     323 34 131321 324 131320 324 262390 326 327 0 131321 328
     131320 328 262205 26 329 323 262205 26 330 109 327857 62
     331 329 330 262394 331 325 326 131320 325 262205 26 333
     113 327808 26 334 333 27 196670 113 334 393281 28 335
     90 34 333 262205 17 336 335 196670 332 336 262205 26
     338 113 327808 26 339 338 27 196670 113 339 393281 28
     340 90 34 338 262205 17 341 340 196670 337 341 262205
     26 343 113 327808 26 344 343 27 196670 113 344 393281
     28 345 90 34 343 262205 17 346 345 196670 342 346
     262205 17 348 337 524367 7 349 348 348 0 1 2
     262205 7 350 242 327811 7 351 349 350 196670 347 351
     327745 52 353 347 95 262205 6 354 353 327745 52 355
     347 95 262205 6 356 355 327813 6 357 354 356 327745
     52 358 347 100 262205 6 359 358 327745 52 360 347
     100 262205 6 361 360 327813 6 362 359 361 327809 6
     363 357 362 327745 52 364 347 105 262205 6 365 364
     327745 52 366 347 105 262205 6 367 366 327813 6 368
     365 367 327809 6 369 363 368 196670 352 369 262205 7
     371 347 262205 6 372 352 393228 6 373 1 31 372
     393296 7 374 373 373 373 327816 7 375 371 374 196670
     370 375 262205 17 377 342 524367 7 378 377 377 0
     1 2 262205 7 379 370 262271 7 380 379 327828 6
     381 378 380 196670 376 381 327745 52 383 332 39 262205
     6 384 383 327745 52 385 342 39 262205 6 386 385
     327745 52 387 337 39 262205 6 388 387 262205 6 389
     376 524300 6 390 1 49 386 388 389 327813 6 391
     384 390 262205 6 392 352 327816 6 393 391 392 196670
     382 393 262205 7 395 370 262205 7 396 76 327828 6
     397 395 396 196670 394 397 262205 6 399 382 262205 6
     400 394 458764 6 401 1 40 400 83 327813 6 402
     399 401 196670 398 402 262205 17 403 19 524367 7 404
     403 403 0 1 2 262205 17 405 332 524367 7 406
     405 405 0 1 2 327813 7 407 404 406 262205 6
     408 398 327822 7 409 407 408 262205 7 410 82 327809
     7 411 410 409 196670 82 411 262205 6 412 53 327866
     62 413 412 83 262205 6 414 398 327866 62 415 414
     83 327847 62 416 413 415 196855 418 0 262394 416 417
     418 131320 417 262205 7 420 370 262205 7 421 78 327809
     7 422 420 421 393228 7 423 1 69 422 196670 419
     423 262205 17 424 44 524367 7 425 424 424 0 1
     2 262205 7 426 419 262205 7 427 76 327828 6 428
     426 427 458764 6 429 1 40 428 83 262205 6 430
     53 458764 6 431 1 26 429 430 262205 6 432 382
     327813 6 433 431 432 327822 7 434 425 433 262205 7
     435 82 327809 7 436 435 434 196670 82 436 131321 418
     131320 418 131321 327 131320 327 262205 26 437 323 327808 26
     438 437 27 196670 323 438 131321 324 131320 326 131321 322
     131320 322 262205 7 441 82 262205 6 442 57 327822 7
     443 441 442 262205 17 444 48 524367 7 445 444 444
     0 1 2 327809 7 446 443 445 327745 447 448 440
     95 327761 6 449 446 0 196670 448 449 327745 447 450
     440 100 327761 6 451 446 1 196670 450 451 327745 447
     452 440 105 327761 6 453 446 2 196670 452 453 327745
     52 454 19 39 262205 6 455 454 327745 447 456 440
     39 196670 456 455 65789 65592 327734 7 9 0 8 131320
     10 262205 7 13 12 393228 7 14 1 69 13 131326
     14 65592
  }
  NumSpecializationConstants 0
}
)";
vsg::VSG io;
return io.read_cast<vsg::ShaderStage>(reinterpret_cast<const uint8_t*>(str), sizeof(str));
};
